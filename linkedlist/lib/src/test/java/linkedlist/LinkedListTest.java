/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package linkedlist;



import datastructures.linkedlist.LinkedList;
import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.*;

public class LinkedListTest {

    @Test
    public void testInstantiateAnEmptyLinkedList() {
        LinkedList<Integer> linkedList = new LinkedList<>();
        assertTrue(linkedList.isEmpty());
    }

    @Test
    public void testInsertIntoTheLinkedList() {
        LinkedList<String> linkedList = new LinkedList<>();
        linkedList.insert("samara");
        linkedList.insert("sami");
        linkedList.insert("mohamad");
        assertFalse(linkedList.isEmpty());
    }

    @Test
    public void testTheHeadPropertyWillProperlyPointToTheFirstNodeInTheLinkedList() {
        LinkedList<Integer> linkedList = new LinkedList<>();
        linkedList.insert(2);
        linkedList.insert(1);
        linkedList.insert(0);
        // "{0} -> {1} -> {2} -> NULL"
        assertEquals(0, linkedList.head.value);
    }

    @Test
    public void testInsertMultipleNodes() {
        LinkedList<String> linkedList = new LinkedList<>();
        linkedList.insert("samara");
        linkedList.insert("sami");
        linkedList.insert("mohamad");
        assertEquals("samara", linkedList.head.next.next.value);
    }

    @Test
    public void testFindingValueWithinTheLinkedListThatExists() {
        LinkedList<String> linkedList = new LinkedList<>();
        linkedList.insert("samara");
        linkedList.insert("sami");
        linkedList.insert("mohamad");
        assertTrue(linkedList.includes("mohamad"));
    }

    @Test
    public void testSearchingForValueInTheLinkedListThatDoesNotExist() {
        LinkedList<String> linkedList = new LinkedList<>();
        linkedList.insert("samara");
        linkedList.insert("sami");
        linkedList.insert("mohamad");
        assertFalse(linkedList.includes("newName"));
    }

    @Test
    public void testPrintCollectionOfAllTheValuesThatExistInTheLinkedList() {
        LinkedList<String> linkedList = new LinkedList<>();
        linkedList.insert("samara");
        linkedList.insert("sami");
        linkedList.insert("mohamad");
        String expected = "{mohamad} -> {sami} -> {samara} -> NULL";
        assertEquals(expected, linkedList.toString());
    }

    @Test
    public void testPrintEmptyLinkedList() {
        LinkedList<String> linkedList = new LinkedList<>();
        String expected = "The LinkedList is Empty";
        assertEquals(expected, linkedList.toString());
    }

//    ============== Test CC06 ===========

    @Test
    public void testAddNodeToEndOfLinkedList() {
        LinkedList<Integer> linkedList = new LinkedList<>();
        linkedList.insert(2);
        linkedList.insert(1);
        linkedList.append(3); // Add 3 To the End
        assertEquals("{1} -> {2} -> {3} -> NULL", linkedList.toString());
    }

    @Test
    public void testAppendMultipleNodesToEndOfLinkedList() {
        LinkedList<Integer> linkedList = new LinkedList<>();
        linkedList.append(1);
        linkedList.append(2);
        linkedList.append(3);
        assertEquals("{1} -> {2} -> {3} -> NULL", linkedList.toString());
    }

    @Test
    public void testInsertBeforeMiddleNode() {
        LinkedList<Integer> linkedList = new LinkedList<>();
        linkedList.insert(4);
        linkedList.insert(3);
        linkedList.insert(1);
        linkedList.insertBefore(3, 2);
        assertEquals("{1} -> {2} -> {3} -> {4} -> NULL", linkedList.toString());
    }

    @Test
    public void testInsertBeforeFirstNode() {
        LinkedList<Integer> linkedList = new LinkedList<>();
        linkedList.insert(2);
        linkedList.insert(1);
        linkedList.insertBefore(1, 0);
        assertEquals("{0} -> {1} -> {2} -> NULL", linkedList.toString());
    }

    @Test
    public void testInsertAfterMiddleNode() {
        LinkedList<Integer> linkedList = new LinkedList<>();
        linkedList.insert(4);
        linkedList.insert(2);
        linkedList.insert(1);
        linkedList.insertAfter(2, 3);
        assertEquals("{1} -> {2} -> {3} -> {4} -> NULL", linkedList.toString());
    }

    @Test
    public void testInsertAfterLastNode() {
        LinkedList<Integer> linkedList = new LinkedList<>();
        linkedList.insert(2);
        linkedList.insert(1);
        linkedList.insertAfter(2, 3);
        assertEquals("{1} -> {2} -> {3} -> NULL", linkedList.toString());
    }

    @Test
    public void testKthFromEnd() {
        LinkedList<Integer> list = new LinkedList<>();
        list.append(1);
        list.append(2);
        list.append(3);
        list.append(4);

        LinkedList<Integer> emptyList = new LinkedList<>();

        assertEquals(4, list.kthFromEnd(0));
        assertEquals(2, list.kthFromEnd(2));

        assertThrows(IllegalArgumentException.class, () -> list.kthFromEnd(10));

        assertThrows(IllegalArgumentException.class, () -> list.kthFromEnd(-1));
        assertThrows(IllegalArgumentException.class, () -> emptyList.kthFromEnd(0));
    }

}

